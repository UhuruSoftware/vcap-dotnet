<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorGettingDBListErrorMessage" xml:space="preserve">
    <value>Error get database list: {0}</value>
  </data>
  <data name="ErrorGettingDBTablesWarningMessage" xml:space="preserve">
    <value>Error get tables of {0}, {1}</value>
  </data>
  <data name="ErrorGettingInstanceListErrorMessage" xml:space="preserve">
    <value>Error get instance list: {0}</value>
  </data>
  <data name="LongTXKillerDisabledInfoMessage" xml:space="preserve">
    <value>Long transaction killer is disabled.</value>
  </data>
  <data name="SqlNodeBindResponseDebugMessage" xml:space="preserve">
    <value>Bind response: {0}</value>
  </data>
  <data name="SqlNodeBindServiceDebugMessage" xml:space="preserve">
    <value>Bind service for db:{0}, bind_opts = {1}</value>
  </data>
  <data name="SqlNodeBringDBOnlineSQL" xml:space="preserve">
    <value>ALTER DATABASE {0} SET ONLINE WITH ROLLBACK IMMEDIATE</value>
  </data>
  <data name="SqlNodeCalculatingQPSDebugMessage" xml:space="preserve">
    <value>Calculate queries per seconds.</value>
  </data>
  <data name="SqlNodeCannotDeleteDBFatalMessage" xml:space="preserve">
    <value>Could not delete database: [{0}]</value>
  </data>
  <data name="SqlNodeCannotDeleteUserFatalMessage" xml:space="preserve">
    <value>Could not delete user '{0}': [{1}]</value>
  </data>
  <data name="SqlNodeCannotSaveProvisionedServicesErrorMessage" xml:space="preserve">
    <value>Could not save entry: {0}</value>
  </data>
  <data name="SqlNodeConnectionLostWarningMessage" xml:space="preserve">
    <value>MsSql connection lost: {0}</value>
  </data>
  <data name="SqlNodeConnectionString" xml:space="preserve">
    <value>Data Source={0},{1};User Id={2};Password={3};MultipleActiveResultSets=true;Pooling=false</value>
  </data>
  <data name="SqlNodeConnectionUnrecoverableFatalMessage" xml:space="preserve">
    <value>MsSql connection unrecoverable</value>
  </data>
  <data name="SqlNodeCouldNotCreateDBWarningMessage" xml:space="preserve">
    <value>Could not create database: [{0}]</value>
  </data>
  <data name="SqlNodeCreateDatabaseDebugMessage" xml:space="preserve">
    <value>Creating: {0}</value>
  </data>
  <data name="SqlNodeCreateDatabaseSQL" xml:space="preserve">
    <value>CREATE DATABASE {0}</value>
  </data>
  <data name="SqlNodeCreateLoginSQL" xml:space="preserve">
    <value>CREATE LOGIN {0} WITH PASSWORD = '{1}'</value>
  </data>
  <data name="SqlNodeCreateUserSQL" xml:space="preserve">
    <value>CREATE USER {0} FOR LOGIN {0}</value>
  </data>
  <data name="SqlNodeCreatingCredentialsInfoMessage" xml:space="preserve">
    <value>Creating credentials: {0}/{1} for database {2}</value>
  </data>
  <data name="SqlNodeDeleteServiceErrorMessage" xml:space="preserve">
    <value>Could not delete service: {0}</value>
  </data>
  <data name="SqlNodeDeleteUserInfoMessage" xml:space="preserve">
    <value>Delete user {0}</value>
  </data>
  <data name="SqlNodeDeletingDatabaseInfoMessage" xml:space="preserve">
    <value>Deleting database: {0}</value>
  </data>
  <data name="SqlNodeDisableLoginSQL" xml:space="preserve">
    <value>ALTER LOGIN {0} DISABLE</value>
  </data>
  <data name="SqlNodeDoneCreatingDBDebugMessage" xml:space="preserve">
    <value>Done creating {0}. Took {1} s.</value>
  </data>
  <data name="SqlNodeDropDatabaseSQL" xml:space="preserve">
    <value>DROP DATABASE {0}</value>
  </data>
  <data name="SqlNodeDropLoginSQL" xml:space="preserve">
    <value>DROP LOGIN {0}</value>
  </data>
  <data name="SqlNodeGenerateVarzDebugMessage" xml:space="preserve">
    <value>Generate varz.</value>
  </data>
  <data name="SqlNodeGenerateVarzErrorMessage" xml:space="preserve">
    <value>Error during generate varz: {0}</value>
  </data>
  <data name="SqlNodeGetRunningQueries" xml:space="preserve">
    <value>SELECT * FROM (SELECT 
	session_id, 
	transaction_id,
	USER_NAME(user_id) AS user_name,
	ISNULL(total_elapsed_time/1000,0) AS elapsed,
	query.text
FROM 
	sys.dm_exec_requests r
CROSS APPLY 
	sys.dm_exec_sql_text( r.sql_handle ) AS query) AS queries
WHERE
	queries.elapsed &gt;= {0}</value>
  </data>
  <data name="SqlNodeGetUserSessionsSQL" xml:space="preserve">
    <value>SELECT session_id FROM sys.dm_exec_sessions WHERE login_name = '{0}'</value>
  </data>
  <data name="SqlNodeKeepAliveSQL" xml:space="preserve">
    <value>select CURRENT_TIMESTAMP</value>
  </data>
  <data name="SqlNodeKillSessionSQL" xml:space="preserve">
    <value>KILL {0}</value>
  </data>
  <data name="SqlNodeTakeDBOfflineSQL" xml:space="preserve">
    <value>ALTER DATABASE {0} SET OFFLINE WITH ROLLBACK IMMEDIATE</value>
  </data>
  <data name="SqlNodeUnbindServiceDebugMessage" xml:space="preserve">
    <value>Unbind service: {0}</value>
  </data>
  <data name="SqlNodeUnprovisionDatabaseDebugMessage" xml:space="preserve">
    <value>Unprovision database:{0}, bindings: {1}</value>
  </data>
  <data name="SqlNodeUnprovisionSuccessDebugMessage" xml:space="preserve">
    <value>Successfully fulfilled unprovision request: {0}</value>
  </data>
  <data name="SqlServerErrorMessageConfigurationNotFound" xml:space="preserve">
    <value>MsSql configuration {0} not found.</value>
  </data>
  <data name="SqlServerErrorMessageCredentialNotFound" xml:space="preserve">
    <value>MsSql credential {0} not found.</value>
  </data>
  <data name="SqlServerErrorMessageDiskFull" xml:space="preserve">
    <value>Node disk is full.</value>
  </data>
  <data name="SqlServerErrorMessageInvalidPlan" xml:space="preserve">
    <value>Invalid plan {0}.</value>
  </data>
  <data name="SqlServerErrorMessageLocalDBError" xml:space="preserve">
    <value>MsSql node local db error.</value>
  </data>
  <data name="StorageQuotaDbListingFormatString" xml:space="preserve">
    <value>&lt;user: '{0}' name: '{1}' size: {2}&gt;</value>
  </data>
</root>